seq = "TTTGTCAGGGTCCACAGCAGGCGCTGAATTCTACAGGCTTGCCCCTCCCCTCGAGTCGATGAGAGAGCATAGTCAGCTAGCGATGGACCAACTTGAATCGCACGATAACTCAGCATAACGCGCACGAGTAGCGCGCTCAATCAGGAAACTTGCGCTGTTTAAAATTTCTGCTACCTGCAATTAAATCTCAGCACCACGGTCCTCCACTTCGGAGGTCGTTGCTAACGATTGTGAGAGGTACCGAGGCGGGCACGGAGAAAACAATGAGGCCATTATTGCGCGGAGTGATCATAAGCTTCTACATGTGTCCACTGACACTTGGGTGTTGTGCTATTCCCCAAACAACCGGCGCCCTACAAAGTTGATCTAATGGTTGCCAGTGATCGAGTTAGATATTCTACGAGTGATAATTCATTTGCTGTGTATGAAATTCTGGCGTTTAATTGGTCCCTTGCCAGAACAGTTCGACCTTTAAAGCTGGACCATAAGTTCATTCAGTAGCTGCACGGCACCGAGATCGCCAACCTGCCCTACTTATAATCAAGACACGCTAAACCCCTCATATAAGCAGCTCCTGAACTAGATTACAACCTCGATCTATCGATACGTTTAAGCTGGGCGTATCAAGAACTCAAGGCTCATTTGAAAGCGTTGGAATTATTTCGGGAGAGCGATAATCTAATTATTTCCGCGGCTCCTCGATTCGCAATGATGGAGGAATCACAATTACAATTTTGTCTAGAAGGAATACACAGAGTATAAATTCCCAACCCTCATACTAGCTTCTCCCATTTGTTGGTTACGCATCTTGGGGTGGCACATGACTTCCGG"

a_count = 0
c_count = 0
g_count = 0
t_count = 0


def read_seq(dna):
    if not dna:
        return 0.0
    else:
        a_count = sum(1 for base in dna.upper() if base == "A")
        c_count = sum(1 for base in dna.upper() if base == "C")
        g_count = sum(1 for base in dna.upper() if base == "G")
        t_count = sum(1 for base in dna.upper() if base == "T")
        return [a_count, c_count, g_count, t_count]


# Call the function and assign the result to global variables
a_count, c_count, g_count, t_count = read_seq(seq)

# Now you can print the global counts
table_data = [
    ['A', 'C', 'G', 'T'],
    [a_count, c_count, g_count, t_count],

]
print(a_count, c_count, g_count, t_count)